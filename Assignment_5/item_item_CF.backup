# -*- coding: utf-8 -*-
# USAGE: spark-submit --master yarn-client --num-executors 10 item_item_CF.py /user/llbui/a5 plot
# First argument is a directory containing input dataset with:
    # MovieLens100K_train.txt
    # MovieLens100K_test.txt
# Second argument "plot" is optional to show test RMSE plot if run locally

from pyspark import SparkConf, SparkContext
from pyspark.sql import SQLContext
from pyspark.ml.evaluation import RegressionEvaluator
from pyspark.sql.types import FloatType
from pyspark.sql import functions as func
import math
import sys

def main(argv=None):
    plot = ""
    if argv is None:
        inputs = sys.argv[1]
            
    conf = SparkConf().setAppName('item-similarity-recommend')
    sc = SparkContext(conf=conf)
    sqlCt = SQLContext(sc)
    
    #read train text file and prepare rating data (userID, movieID, rating)
    text = sqlCt.read.text(inputs+"/MovieLens100K_train.txt")
    train = text.map(lambda row: row.value.split("\t")) \
                .map(lambda l: (int(l[0]), int(l[1]), float(l[2]))) \
                .toDF(["userID", "movieID", "rating"])
    train.cache()
    
    #read test text file and prepare rating data (userID, movieID, rating)
    text = sqlCt.read.text(inputs+"/MovieLens100K_test.txt")
    test = text.map(lambda row: row.value.split("\t")) \
                .map(lambda l: (int(l[0]), int(l[1]), float(l[2]))) \
                .toDF(["userID", "movieID", "rating"])
    test.cache()

    # Average rating per user
    average_user_rating = train.groupBy("userID").agg(func.mean("rating").alias("avg_rating"))
    user_rating = train.join(average_user_rating, on="userID")
    user_rating_dev = user_rating.withColumn("dev_rating", \
                    user_rating["rating"] - user_rating["avg_rating"]) \
                    .map(lambda row: (row.userID,row.movieID, row.dev_rating, row.avg_rating))
    # 80,000 ratings are small is enough to collect in this case
    # Otherwise, we can store in disk and only read in specific user when needed
    user_rating_bc = sc.broadcast(user_rating_dev.collect())
    
    # compute item-item similarities by joining ratings from the same user
    # with movieID < movieID2 to avoid duplicated pairs
    train2 = train.withColumnRenamed("movieID", "movieID2") \
                    .withColumnRenamed("rating", "rating2")
    itempairs = train.join(train2, on=((train.userID == train2.userID) & \
                                       (train.movieID < train2.movieID2)))
    itempairs_group = itempairs.groupBy("movieID", "movieID2").agg( \
        func.corr("rating","rating2").alias("correlation"))
    itempairs_similarity = itempairs_group.filter("correlation is not Null") \
            .select("movieID", "movieID2", "correlation")
    itempairs_similarity.cache()         
    
    # List to store results:
    model_result = []
    evaluator = RegressionEvaluator(metricName="rmse", labelCol="rating",
                                predictionCol="prediction")
    thresholds = [0.5, 0.6, 0.7, 0.8, 0.9]
    for threshold in thresholds:
        itempairs_filtered = itempairs_similarity.filter("correlation >= " + str(threshold)) \
                            .map(lambda row: ((row.movieID, row.movieID2),row.correlation))
        # data is small is enough to collect in this case
        # Otherwise, we can store in disk and only read in pairs with specific movieID when needed
        itempairs_filtered_bc = sc.broadcast(dict(itempairs_filtered.collect()))
        
        
        def getRating(userID, movieID, r, s):
            this_user_rating = list(filter(lambda x: x[0]==userID, r.value))
            if (len(this_user_rating) == 0): # New user
                return None
            else: 
                rating_similar = []
                for rating in this_user_rating:
                    movieID2 = rating[1] # get movieID rated by the user
                    key = (movieID, movieID2) if (movieID < movieID2) else (movieID2, movieID)
                    if key in s.value:
                        similarity = s.value[key] # similarity of movieID and movieID2
                        rating_similar.append((rating[2],similarity))
                if (len(rating_similar) == 0): # New similar items rated by the user
                    return None
                else:
                    rating_avg = this_user_rating[0][3]
                    rating_dev = sum([x[0]*x[1] for x in rating_similar]) \
                                     / sum([x[1] for x in rating_similar])
                    return float(rating_avg + rating_dev)
        
        # RMSE on test data - excluding users who do not have any prediction
        udf_getRating = func.udf(lambda x,y: getRating(x, y,user_rating_bc,itempairs_filtered_bc), FloatType())
        test_user_rating = test.withColumn("prediction", \
                    udf_getRating("userID", "movieID"))
        
        prediction_test = test_user_rating.filter("prediction is not Null")
        rmse_test = evaluator.evaluate(prediction_test)
        model_result.append((threshold, rmse_test))
        
    # Show plot if run locally
    if (plot == "plot"):
        plotRMSE(model_result)
    
    # Print results
    print("ITEM SIMILARITY COLLABORATIVE FILTERING: ")
    for i in model_result: 
        print("- Threshold = %3.1f: Test RMSE = %s" %(i[0], i[1]))


if __name__ == "__main__":
    main()

def plotRMSE(model_result):
    import matplotlib.pyplot as plt
    import numpy as np
    x = [i[0] for i in model_result]
    y = [i[1] for i in model_result]
    plt.bar(np.arange(len(x)), y, 0.5, color='blue', label='Test RMSE')
    plt.xticks(np.arange(len(x))+0.2,x)
    plt.ylabel('Test RMSE')
    plt.ylim([min(y)-0.01,max(y)+0.01])
    plt.title('Fit Item-Item Based Recommendation')
    plt.xlabel('Threshold')
    plt.show()